{"version":3,"sources":["components/app.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","welcomeMessage","setWelcomeMessage","userList","setUserList","fetchMessage","a","fetch","then","res","text","message","useEffect","fetchUsers","json","users","className","onClick","length","map","user","id","username","name","email","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"mOA2DeA,EAlDO,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACjBC,EADiB,KACDC,EADC,OAEQF,mBAAmB,IAF3B,mBAEjBG,EAFiB,KAEPC,EAFO,KAIlBC,EAAY,uCAAG,4BAAAC,EAAA,sEACKC,MAAM,QAAQC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UADnC,OACXC,EADW,OAEjBT,EAAkBS,GAFD,2CAAH,qDAKlBC,qBAAU,WACNP,MACD,IAEH,IAAMQ,EAAU,uCAAG,4BAAAP,EAAA,sEACKC,MAAM,cAAcC,MAAK,SAAAC,GAAG,OAAIA,EAAIK,UADzC,OACTC,EADS,OAEfX,EAAYW,GAFG,2CAAH,qDAKhB,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,2BAAIf,GACJ,4BAAQgB,QAASJ,GAAjB,eACqB,IAApBV,EAASe,QACN,+BACI,+BACI,4BACI,kCACA,wCACA,oCACA,uCAGR,+BACKf,EAASgB,KAAI,SAACC,GAAD,OACV,4BACI,4BAAKA,EAAKC,IACV,4BAAKD,EAAKE,UACV,4BAAKF,EAAKG,MACV,4BAAKH,EAAKI,gBCpC1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9B,a","file":"static/js/main.f8c99eae.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\ntype UserUI = {\n    id: string,\n    username: string,\n    name: string,\n    email: string\n}\n\nconst App: React.FC = () => {\n    const [welcomeMessage, setWelcomeMessage] = useState('');\n    const [userList, setUserList] = useState<UserUI[]>([]);\n\n    const fetchMessage = async () => {\n        const message = await fetch('/api').then(res => res.text())\n        setWelcomeMessage(message)\n    }\n\n    useEffect(() => {\n        fetchMessage()\n    }, [])\n\n    const fetchUsers = async () => {\n        const users = await fetch('/users/all').then(res => res.json())\n        setUserList(users)\n    }\n\n    return (\n        <div className=\"app\">\n            <header className=\"app-header\">\n                <p>{welcomeMessage}</p>\n                <button onClick={fetchUsers}>Fetch users</button>\n                {userList.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Username</th>\n                                <th>Name</th>\n                                <th>Email</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {userList.map((user: UserUI) => (\n                                <tr>\n                                    <td>{user.id}</td>\n                                    <td>{user.username}</td>\n                                    <td>{user.name}</td>\n                                    <td>{user.email}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </header>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}